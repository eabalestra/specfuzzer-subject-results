buckets=46
specs=48
=====================================
:::OBJECT
this.back <= daikon.Quant.size(this.theArray)-1
this.currentSize <= daikon.Quant.size(this.theArray)
this.front <= daikon.Quant.size(this.theArray)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.front
this.front == 0 || this.front == 1 || this.front == 2
=====================================
:::POSTCONDITION
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
this.front <= daikon.Quant.size(this.theArray)-1
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.back))) == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
\old(this.currentSize) <= daikon.Quant.size(this.theArray)
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
\old(x) == daikon.Quant.getElement_Object(this.theArray, this.back)
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.back)>
\old(this.currentSize) <= daikon.Quant.size(this.theArray)-1
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
daikon.Quant.memberOf(\old(x) , this.theArray )
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>

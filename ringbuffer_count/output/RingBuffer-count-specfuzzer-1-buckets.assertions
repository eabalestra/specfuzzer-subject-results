buckets=54
specs=55
=====================================
:::OBJECT
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.free, this.capacity_>
this.start == 1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.capacity_
=====================================
:::POSTCONDITION
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.free, return>
this.free % this.start == 0
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, return>
daikon.Quant.size(this.data) == 1 || daikon.Quant.size(this.data) == 2 || daikon.Quant.size(this.data) == 3
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - -1 ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 > 0) ) holds for: <this.free, return>
\result == 0 || \result == 1 || \result == 2
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), return>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.start, return>
daikon.Quant.size(this.data) == 1
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < #(RingBuffer.data) ) holds for: <orig(this), return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>

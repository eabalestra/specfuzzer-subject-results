buckets=30
specs=31
=====================================
:::OBJECT
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.free
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 < 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.free, this.capacity_>
this.start == 1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.start
=====================================
:::POSTCONDITION
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
daikon.Quant.size(this.data) == 1 || daikon.Quant.size(this.data) == 2 || daikon.Quant.size(this.data) == 3
this.start == this.free
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
daikon.Quant.size(this.data) == 1
this.start < this.capacity_
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 >= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
this.start == \old(this.free)
